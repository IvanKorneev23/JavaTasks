package com.company;

import java.util.Comparator;

class HubList<E> implements HubListImpl<E> {
    int size = 0; // задаем начальный размер для нашего листа
    E[] list = (E[]) new Object[size]; // испльзуем дженерики для того, чтобы разраб сам юзал типы

    @Override
    public void add(E element) {  // наследуем метод и реализуем добавление данных
        this.size++; // увеличиваем размер листа на один
        E[] newList = (E[]) new Object[this.size]; // создаем лист с величиной + 1
        for (int i = 0; i < this.list.length; i++) { 
            newList[i] = this.list[i]; // записываем все элементы из предыдущего листа
        }
        newList[this.size-1] = element; // добавляем новый элемент
        this.list = newList; // делаем наш начальный лист с новым элементом и размером + 1
    }

    @Override
    public E removeAt(int index) { // реализуем удаление данных в наследованном методе
        E[] newList = (E[]) new Object[this.size-1]; // новый лист
        E item = null; // задаем базовое значение для нашего поля
        int ix = 0; // индекс в нашем списке
        if (index > this.size-1) { // делаем базовую проверку
            return null;
        }
        for (int i = 0; i < this.size; i++) { // ну а тут и так все понятно, реализация удаления элемента
            if (index == i) {
                item = list[i];
            }
            if (index != i) {
                newList[ix] = list[i];
                ix++;
            }
            if (i == this.size-1) {
                this.list = newList;
                this.size--;
                return item;
            }
        }
        return item; // вернем удаленный элемент 
    }

    @Override
    public void sort(Comparator<? super E> c) { // сделаем сортировку, но она будет только для чисел 
        for (int i = 0; i < this.size - 1; i++) { // сортировка пузырьком
            for (int j = this.size - 1; j > i; j--) {
                if (c.compare(this.list[i], this.list[j]) > 0) {
                    E temp = this.list[j - 1];
                    this.list[j - 1] = this.list[j];
                    this.list[j] = temp;
                }
            }
        }
    }

    @Override
    public int find(E element) { // найти элемент в списке, ну это вообще ничего сложного
        // находим первый попавшийся и возвращаем его индекс иначе -1
        for (int i = 0; i < this.size; i++) {
            if(this.list[i].equals(element)){
                return i;
            }
        }
        return -1;
    }

    void showData() { // ну а это элементарно, просто выведем все элементы в строку
        for (E e : this.list) {
            System.out.print(e + " ");
        }
        System.out.println(); 
    }
}

class HubComparator implements Comparator<Object> {
    @Override
    public int compare(Object a, Object b) { // тот самый магический компоратор
        if (a instanceof Integer) { // проверка что а имеет тим интегер
            return Integer.compare((int) a, (int) b);
        } else {
            return -1; // иначе
        }
    }
}

interface HubListImpl<E> { // это наш интерфейс, что вы наисали чтобы от него коннект держать
    void add(E element);
    E removeAt(int index);
    void sort(Comparator<? super E> c);
    int find(E element);
}

public class Main {
    public static void main(String[] args) {
        HubList<Integer> youList = new HubList<Integer>();
        youList.add(41);
        youList.add(5728);
        youList.add(33);
        youList.showData(); // 41, 5728, 33
        System.out.println(youList.find(41)); // 0
        System.out.println(youList.find(1)); // -1
        youList.sort(new HubComparator()); // ...
        youList.showData(); // 33, 41, 5728
        System.out.println(youList.removeAt(2)); // 5728
        youList.showData(); // [33, 41]
    }
}